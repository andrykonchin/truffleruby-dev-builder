name: TruffleRuby Dev Builds
on:
  push:
    tags:
    - '*'
  schedule:
  - cron: '0 8 * * *'
jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
      if: github.event_name == 'schedule'

    - name: Clone TruffleRuby
      uses: actions/checkout@v2
      with:
        repository: oracle/truffleruby
        path: truffleruby
    - name: Set latest_commit
      id: latest_commit
      working-directory: truffleruby
      run: echo "::set-output name=commit::$(git rev-parse HEAD)"

    - name: Cancel if latest commit already built
      uses: actions/github-script@v2
      id: check_commit
      with:
        script: |
          const latestDevCommit = "${{ steps.latest_commit.outputs.commit }}"
          const { owner, repo } = context.repo
          let { data: release } = await github.repos.getLatestRelease({ owner, repo })
          const latestReleaseCommit = release.body.split('@')[1]
          console.log(`Latest Release commit: ${latestReleaseCommit}`)
          console.log(`Latest TruffleRuby commit: ${latestDevCommit}`)
          if (latestReleaseCommit === latestDevCommit) {
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
            return 'stop'
          } else {
            return 'build'
          }
        result-encoding: string
    - name: Waiting for cancellation
      run: sleep 60
      if: steps.check_commit.outputs.result == 'stop'
    - name: Should build?
      run: test "${{ steps.check_commit.outputs.result }}" = "build"

    - name: Set tag name
      id: tag_name
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          tag=builds-$(date +%Y%m%d-%H%M%S)
        else
          tag=$(basename "${{ github.ref }}")
        fi
        echo "::set-output name=tag::$tag"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.tag }}
        release_name: ${{ steps.tag_name.outputs.tag }}
        draft: true
        prerelease: false
        body: oracle/truffleruby@${{ steps.latest_commit.outputs.commit }}
    - name: Create artifact files
      run: |
        mkdir info
        echo "${{ steps.latest_commit.outputs.commit }}" > info/commit
        echo "${{ steps.create_release.outputs.id }}" > info/release_id
        echo "${{ steps.create_release.outputs.upload_url }}" > info/upload_url
    - uses: actions/upload-artifact@v1
      with:
        name: info
        path: info

  build:
    needs: [release]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04, macos-10.15 ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: info
    - name: Set upload_info
      id: upload_info
      run: |
        echo "::set-output name=commit::$(cat info/commit)"
        echo "::set-output name=upload_url::$(cat info/upload_url)"
    - name: Set platform
      id: platform
      run: |
        platform=${{ matrix.os }}
        platform=${platform/macos-*/macos-latest}
        echo "::set-output name=platform::$platform"

    - name: Setup system ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6
    - run: echo "SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV
      if: startsWith(matrix.os, 'macos')

    - name: Clone TruffleRuby
      uses: actions/checkout@v2
      with:
        repository: oracle/truffleruby
        ref: ${{ steps.upload_info.outputs.commit }}
    - name: Install JVMCI
      run: |
        tool/jt.rb install jvmci
        echo "JAVA_HOME=$(tool/jt.rb install jvmci)" >> $GITHUB_ENV
    - name: Install mx
      run: tool/jt.rb mx --version
    - name: Clone Graal
      uses: actions/checkout@v2
      with:
        repository: oracle/graal
        path: graal
        fetch-depth: 0
    - run: mv graal ..
    - run: tool/jt.rb mx sforceimports

    # We build everything except native images first,
    # so that we minimize the memory used by mx, etc when building native images.
    - name: Build jars
      run: tool/jt.rb build --env native --native-images=none
    - run: free -m
      if: startsWith(matrix.os, 'ubuntu-')
    - name: Build native images
      run: tool/jt.rb build --env native

    - run: mkdir -p ~/.rubies
    - run: mv $(tool/jt.rb mx --env native standalone-home ruby) ~/.rubies/truffleruby-head
    - name: Create archive
      run: tar czf truffleruby-head-${{ steps.platform.outputs.platform }}.tar.gz -C ~/.rubies truffleruby-head

    - name: Basic test
      run: ~/.rubies/truffleruby-head/bin/ruby --version
    - name: OpenSSL test
      run: ~/.rubies/truffleruby-head/bin/ruby -ropen-uri -e 'puts open("https://rubygems.org/") { |f| f.read(1024) }'

    - name: Upload Built Ruby
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.upload_info.outputs.upload_url }}
        asset_path: truffleruby-head-${{ steps.platform.outputs.platform }}.tar.gz
        asset_name: truffleruby-head-${{ steps.platform.outputs.platform }}.tar.gz
        asset_content_type: application/gzip

  metadata:
    name: Publish Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: info
    - name: Set publish_info
      id: publish_info
      run: |
        release_id=$(cat info/release_id)
        echo "::set-output name=release_id::$release_id"
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.publish_info.outputs.release_id }}
    - uses: eregon/keep-last-n-releases@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        n: 7
